"TB_Detected", "HIV_Detected", "Athritis_Detected", "Stroke_Detected",
"Cancer_Detected", "Mental_Detected", "Age_Detected", "Other_Detected")
for(column in disease_columns) {
df <- interest_disease %>%
mutate(!!rlang::sym(column) = as.factor(ifelse(.data[[column]] == "Yes", "1", "0")))
for(column in disease_columns) {
df <- interest_disease %>%
mutate(!!rlang::sym(column) := as.factor(ifelse(.data[[column]] == "Yes", "1", "0")))
fit_km(column, df)
}
for(column in disease_columns) {
df <- interest_disease %>%
mutate(!!rlang::sym(column) := as.factor(ifelse(.data[[column]] == "Yes", "1", "0")))
formula <- as.formula(paste("Surv(time = duration, event = event_observed) ~", column, "* Facilty_Type"))
km_trt_fit <- survfit(formula, data = df)
plot <- ggsurvplot(km_trt_fit, data = df,
xlab = "Days", ylab = "Survival Probability",
ggtheme = theme_minimal(),
title = paste("Survival plot for:", column, "by Facility Type"))
print(plot)
# fit_km(column, df)
}
interest_disease = clean_Data %>%
select(duration,
event_observed,
Facilty_Type,
Cardiac_Detected,
Hypertention_Detected,
Pulmonary_Detected,
Kidney_Condition...107,
Obesity_Detected,
Liver_Detected,
Neurological_Detected,
Diabetes_Detected,
Rheumatology_Detected,
TB_Detected,
HIV_Detected,
Athritis_Detected,
Stroke_Detected,
Cancer_Detected,
Mental_Detected,
Age_Detected,
Other_Detected)
interest_disease <- interest_disease %>%
mutate(Other_Detected = ifelse(!is.na(Other_Detected) & Other_Detected != "", "Yes", "No"))
surv_disease <- Surv(interest_disease$duration, interest_disease$event_observed)
fit_yes <- survfit(surv_object ~ Other_Detected, data = interest_disease, subset = Other_Detected == "Yes")
fit_yes <- survfit(surv_disease ~ Other_Detected, data = interest_disease, subset = Other_Detected == "Yes")
fit_no <- survfit(surv_disease ~ Other_Detected, data = interest_disease, subset = Other_Detected == "No")
ggsurvplot(list(yes = fit_yes, no = fit_no),
data = interest_disease,
conf.int = TRUE, # Show confidence intervals
pval = TRUE, # Show p-value of the log-rank test
risk.table = TRUE, # Show risk table
linetype = "strata", # Different line types for strata
surv.median.line = "hv", # Show median survival
ggtheme = theme_minimal()) # Use a minimal theme
disease_columns <- c("Cardiac_Detected", "Hypertention_Detected", "Pulmonary_Detected",
"Kidney_Condition...107", "Obesity_Detected", "Liver_Detected",
"Neurological_Detected", "Diabetes_Detected", "Rheumatology_Detected",
"TB_Detected", "HIV_Detected", "Athritis_Detected", "Stroke_Detected",
"Cancer_Detected", "Mental_Detected", "Age_Detected", "Other_Detected")
for (column in disease_columns){
fit_yes_in <- survfit(surv_disease ~ column, data = interest_disease, subset = Other_Detected == "Yes")
fit_no_in <- survfit(surv_disease ~ column, data = interest_disease, subset = Other_Detected == "No")
ggsurvplot(list(yes = fit_yes_in, no = fit_no_in),
data = interest_disease,
conf.int = TRUE, # Show confidence intervals
pval = TRUE, # Show p-value of the log-rank test
risk.table = TRUE, # Show risk table
linetype = "strata", # Different line types for strata
surv.median.line = "hv", # Show median survival
ggtheme = theme_minimal())
}
fit_yes_cardiac <- survfit(surv_disease ~ Cardiac_Detected, data = interest_disease, subset = Other_Detected == "Yes")
as.data.frame(table(interest_disease[, disease_columns]))
lapply(interest_disease[, disease_columns], unique)
columns_to_replace <- c("Cardiac_Detected", "Hypertention_Detected", "Pulmonary_Detected",
"Kidney_Condition...107", "Obesity_Detected", "Liver_Detected",
"Neurological_Detected", "Diabetes_Detected", "Rheumatology_Detected",
"TB_Detected", "HIV_Detected", "Athritis_Detected", "Stroke_Detected",
"Cancer_Detected", "Mental_Detected", "Age_Detected")
clean_Data <- clean_Data %>%
mutate(across(all_of(columns_to_replace), ~ifelse(is.na(.), "No", .)))
lapply(interest_disease[, disease_columns], unique)
columns_to_replace <- c("Cardiac_Detected", "Hypertention_Detected", "Pulmonary_Detected",
"Kidney_Condition...107", "Obesity_Detected", "Liver_Detected",
"Neurological_Detected", "Diabetes_Detected", "Rheumatology_Detected",
"TB_Detected", "HIV_Detected", "Athritis_Detected", "Stroke_Detected",
"Cancer_Detected", "Mental_Detected", "Age_Detected")
interest_disease <- interest_disease %>%
mutate(across(all_of(columns_to_replace), ~ifelse(is.na(.), "No", .)))
lapply(interest_disease[, disease_columns], unique)
fit_yes_cardiac <- survfit(surv_disease ~ Cardiac_Detected, data = interest_disease, subset = Other_Detected == "Yes")
fit_no_cardiac <- survfit(surv_disease ~ Cardiac_Detected, data = interest_disease, subset = Other_Detected == "No")
ggsurvplot(list(yes = fit_yes_cardiac, no = fit_no_cardiac),
data = interest_disease,
conf.int = TRUE, # Show confidence intervals
pval = TRUE, # Show p-value of the log-rank test
risk.table = TRUE, # Show risk table
linetype = "strata", # Different line types for strata
surv.median.line = "hv", # Show median survival
ggtheme = theme_minimal())
for (column in disease_columns){
fit_yes_disease <- survfit(surv_disease ~ column, data = interest_disease, subset = Other_Detected == "Yes")
fit_no_disease <- survfit(surv_disease ~ column, data = interest_disease, subset = Other_Detected == "No")
ggsurvplot(list(yes = fit_yes_disease, no = fit_no_disease),
data = interest_disease,
conf.int = TRUE, # Show confidence intervals
pval = TRUE, # Show p-value of the log-rank test
risk.table = TRUE, # Show risk table
linetype = "strata", # Different line types for strata
surv.median.line = "hv", # Show median survival
ggtheme = theme_minimal())
}
fit_yes_Hypertention_Detected <- survfit(surv_disease ~ Hypertention_Detected, data = interest_disease, subset = Other_Detected == "Yes")
fit_no_Hypertention_Detected <- survfit(surv_disease ~ Hypertention_Detected, data = interest_disease, subset = Other_Detected == "No")
ggsurvplot(list(yes = fit_yes_Hypertention_Detected, no = fit_no_Hypertention_Detected),
data = interest_disease,
conf.int = TRUE, # Show confidence intervals
pval = TRUE, # Show p-value of the log-rank test
risk.table = TRUE, # Show risk table
linetype = "strata", # Different line types for strata
surv.median.line = "hv", # Show median survival
ggtheme = theme_minimal())
perform_survival_analysis <- function(disease_col) {
surv_formula <- as.formula(paste("surv_disease ~", disease_col))
fit_yes <- survfit(surv_formula, data = interest_disease, subset = Other_Detected == "Yes")
fit_no <- survfit(surv_formula, data = interest_disease, subset = Other_Detected == "No")
plot <- ggsurvplot(list(yes = fit_yes, no = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal())
print(plot)
}
for (disease in disease_columns){
perform_survival_analysis(disease)
}
disease_columns
surv_obj = Surv(time = surv_Data$duration, event = surv_Data$event_observed)
km_fit = survfit(surv_obj~1*Facilty_Type, data = clean_Data)
summary(km_fit)
ggsurvplot(km_fit, data = clean_Data,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")
surv_obj = Surv(time = surv_Data$duration, event = surv_Data$event_observed)
km_fit = survfit(surv_obj~Facilty_Type, data = clean_Data)
summary(km_fit)
ggsurvplot(km_fit, data = clean_Data,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")
fit_yes_Detected <- survfit(surv_disease ~ Facilty_Type, data = interest_disease, subset = across(all_of(disease_columns)) == "Yes")
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/STA4020 Design and Analysis of Experiments/Tasks and assignments/task 3")
knitr::opts_chunk$set(echo = TRUE)
varieties = c("V1", "V2", "V3")
blocks = c("Block1", "Block2", "Block3", "Block4", "Block5", "Block6")
trt = len(varieties)
varieties = c("V1", "V2", "V3")
blocks = c("Block1", "Block2", "Block3", "Block4", "Block5", "Block6")
trt = length(varieties)
reps = length(blocks)
cat("There are", varieties, "of maize on\n\t", blocks, "blocks")
varieties = c("V1", "V2", "V3")
blocks = c("Block1", "Block2", "Block3", "Block4", "Block5", "Block6")
trt = length(varieties)
reps = length(blocks)
cat("There are", trt, "of maize on\n\t", reps, "blocks")
varieties = c("V1", "V2", "V3")
blocks = c("Block1", "Block2", "Block3", "Block4", "Block5", "Block6")
trt = length(varieties)
reps = length(blocks)
cat("There are", trt, "of maize on\n\t ", reps, "blocks")
rnorm(reps, 0, 5)
?rnorm
sample(seq(0.9, 12),5)
mean(sample(seq(0.9, 12),5))
sd(sample(seq(0.9, 12),5))
rnorm(reps, 8.1,4.32435)
min_havrest = 0.9
max_havrest = 12
# generate random data
country_data = sample(min_havrest, max_havrest, 9)
mn_yield = mean(country_data)
sd_yield = sd(country_data)
knitr::opts_chunk$set(echo = TRUE)
varieties = c("V1", "V2", "V3")
blocks = c("Block1", "Block2", "Block3", "Block4", "Block5", "Block6")
trt = length(varieties)
reps = length(blocks)
cat("There are", trt, "of maize on\n\t ", reps, "blocks")
min_havrest = 0.9
max_havrest = 12
# generate random data
country_data = sample(seq(min_havrest, max_havrest), 9)
mn_yield = mean(country_data)
sd_yield = sd(country_data)
cat("A sample of values from the minimum yield of each country to the max yield in Africa:\n", country_data, "\nwas used to generate the mean:\n", mn_yield, "\nand standard deviation:", sd_yield)
knitr::opts_chunk$set(echo = TRUE)
varieties = c("V1", "V2", "V3")
blocks = c("Block1", "Block2", "Block3", "Block4", "Block5", "Block6")
trt = length(varieties)
reps = length(blocks)
cat("There are", trt, "of maize on\n\t ", reps, "blocks")
min_havrest = 0.9
max_havrest = 12
# generate random data
country_data = sample(seq(min_havrest, max_havrest), 9)
mn_yield = mean(country_data)
sd_yield = sd(country_data)
cat("A sample of values from the minimum yield of each country to the max yield in Africa:\n", country_data, "\nwas used to generate the mean:\n", mn_yield, "\nand standard deviation:", sd_yield)
set.seed(123)
a = ample(seq(min_havrest, max_havrest), 9)
set.seed(123)
a = sample(seq(min_havrest, max_havrest), 9)
set.seed(123)
rnorm(5, mean(a), sd(a))
set.seed(123)
a = sample(seq(min_havrest, max_havrest), 9)
set.seed(123)
rnorm(3, mean(a), sd(a))
set.seed(123)
a = sample(seq(min_havrest, max_havrest), 9)
set.seed(123)
yield = rnorm(3, mean(a), sd(a))
default_yield = c(V1 = yield[1], V2 = yield[2], V3 = yield[3])
effect = rnorm(reps, mn_yield, sd_yield)
data = data.frame(Block = character(), Variety = character(), Yield = numeric())
# no need to seed so that each crop has a different yield
for (b in blocks) {
for (v in varieties) {
avg = default_yield[[v]] + effects[which(blocks == b)]
acc_yld = rnorm(1, avg, 5)
data <- rbind(data, data.frame(Block = b, Variety = v, Yield = acc_yld))
}
}
default_yield
effect
name(default_yield)
colnames(default_yield)
names(default_yield)
names(effect) = blocks
names(effect)
effects
effect
default_yield = c(V1 = yield[1], V2 = yield[2], V3 = yield[3])
effect = rnorm(reps, mn_yield, sd_yield)
names(effect) = blocks
data = data.frame(Block = character(), Variety = character(), Yield = numeric())
# no need to seed so that each crop has a different yield
for (b in blocks) {
for (v in varieties) {
avg = default_yield[[v]] + effects[which(names(effect) == b)]
acc_yld = rnorm(1, avg, 5)
data <- rbind(data, data.frame(Block = b, Variety = v, Yield = acc_yld))
}
}
default_yield = c(V1 = yield[1], V2 = yield[2], V3 = yield[3])
effect = rnorm(reps, mn_yield, sd_yield)
names(effect) = blocks
data = data.frame(Block = character(), Variety = character(), Yield = numeric())
# no need to seed so that each crop has a different yield
for (b in blocks) {
for (v in varieties) {
avg = default_yield[[v]] + effects[b]
acc_yld = rnorm(1, avg, 5)
data <- rbind(data, data.frame(Block = b, Variety = v, Yield = acc_yld))
}
}
default_yield = c(V1 = yield[1], V2 = yield[2], V3 = yield[3])
effect = rnorm(reps, mn_yield, sd_yield)
names(effect) = blocks
data = data.frame(Block = character(), Variety = character(), Yield = numeric())
# no need to seed so that each crop has a different yield
for (b in blocks) {
for (v in varieties) {
avg = default_yield[[v]] + effects[[b]]
acc_yld = rnorm(1, avg, 5)
data <- rbind(data, data.frame(Block = b, Variety = v, Yield = acc_yld))
}
}
default_yield = c(V1 = yield[1], V2 = yield[2], V3 = yield[3])
effect = rnorm(reps, mn_yield, sd_yield)
names(effect) = blocks
data = data.frame(Block = character(), Variety = character(), Yield = numeric())
# no need to seed so that each crop has a different yield
for (b in blocks) {
for (v in varieties) {
avg = default_yield[[v]] + effect[[b]]
acc_yld = rnorm(1, avg, 5)
data <- rbind(data, data.frame(Block = b, Variety = v, Yield = acc_yld))
}
}
data
library(dplyr)
?pivot_wider
??pivot_wider
data_long =data %>% pivot_wider(
names_from = Block,
values_from = Yield
)
data_long =pivot_wider( data
names_from = Block,
data_long =pivot_wider( data,
names_from = Block,
values_from = Yield
)
data_long =dplyr::pivot_wider( data = data,
names_from = Block,
values_from = Yield
)
data_long =tidyr::pivot_wider( data = data,
names_from = Block,
values_from = Yield
)
data_long
wrk_data = data %>% mutate(
Variety = as.factor(Variety),
Block = as.factor(Block)
)
wrk_data
anv = anova(Yield~Variety+Block, data = wrk_data)
anv = aov(Yield~Variety+Block, data = wrk_data)
summary(anv)
pvals = summary(anv)$`Pr(>F)`
pvals
pvals = summary(anv)$"Pr(>F"
pvals
colnames(summary(anv))
names(summary(anv))
anv$coefficients
anv$qr
pvals = summary(anv)[,"Pr(>F)"]
pvals = summary(anv)[,`Pr(>F)`]
pvals = summary(anv)[[1]][,`Pr(>F)`]
pvals = summary(anv)[[1]][,"Pr(>F)"]
pvals
variety_pval = pvals[1]
block_pval = pvals[2]
check_p_val = function(pval, sig_level, element){
print(paste("for the element", element, "\n"))
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")
}else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
check_p_val(variety_pval, 0.05, "variety")
check_p_val = function(pval, sig_level, element){
print(cat("for the element", element, "\n"))
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")   }else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
check_p_val(variety_pval, 0.05, "variety")
check_p_val = function(pval, sig_level, element){
cat("for the element", element, "\n")
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")   }else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
check_p_val(variety_pval, 0.05, "variety")
check_p_val = function(pval, sig_level, element){
cat("for the element", element, "\n\n")
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield from fertilizer treatment that is statistically and significantly different from the other yields")   }else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield from fertilizer treatment")
}
}
check_p_val(variety_pval, 0.05, "variety")
check_p_val = function(pval, sig_level, element){
cat("for the element", element, "\n\n")
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield of the maize varieties that is statistically and significantly different from the other yields")   }else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield of the maize varieties")
}
}
check_p_val(variety_pval, 0.05, "variety")
check_p_val(block_pval, 0.05, "block")
library(ggplot2)
ggplot(wrk_data, aes(x = Variety, y = Yield))+
geom_boxplot()+
labs(
title = "Box-plots of the yield for each variety",
x = "varieties",
y = "spread"
)+
theme_minimal()
library(ggplot2)
ggplot(wrk_data, aes(x = Variety, y = Yield, fill = Variety))+
geom_boxplot()+
labs(
title = "Box-plots of the yield for each variety",
x = "varieties",
y = "spread"
)+
theme_minimal()+
scale_fill_brewer(palette = "Set4")
library(ggplot2)
ggplot(wrk_data, aes(x = Variety, y = Yield, fill = Variety))+
geom_boxplot()+
labs(
title = "Box-plots of the yield for each variety",
x = "varieties",
y = "spread"
)+
theme_minimal()+
scale_fill_brewer(palette = "Set2")
library(ggplot2)
ggplot(wrk_data, aes(x = Variety, y = Yield, fill = Variety))+
geom_boxplot()+
labs(
title = "Box-plots of the yield for each variety",
x = "varieties",
y = "spread"
)+
theme_minimal()+
scale_fill_brewer(palette = "Set4")
summary(wrk_data[, c("Variety", "Yield")])
install.packages("agricolae")
library(agricolae)
lsd_res = LSD.test(aov(Yield~Variety, data = wrk_data), "Variety", p.adj = "none")
lsd_res$groups
knitr::opts_chunk$set(echo = TRUE)
varieties = c("V1", "V2", "V3")
blocks = c("Block1", "Block2", "Block3", "Block4", "Block5", "Block6")
trt = length(varieties)
reps = length(blocks)
cat("There are", trt, "of maize on\n\t ", reps, "blocks")
min_havrest = 0.9
max_havrest = 12
# generate random data
country_data = sample(seq(min_havrest, max_havrest), 9)
mn_yield = mean(country_data)
sd_yield = sd(country_data)
cat("A sample of values from the minimum yield of each country to the max yield in Africa:\n", country_data, "\nwas used to generate the mean:\n", mn_yield, "\nand standard deviation:", sd_yield)
# seed twice remember math modelling when the data kept changing on each run
set.seed(123)
a = sample(seq(min_havrest, max_havrest), 9)
set.seed(123)
yield = rnorm(3, mean(a), sd(a)) # is also a random function
yield
default_yield = c(V1 = yield[1], V2 = yield[2], V3 = yield[3])
effect = rnorm(reps, mn_yield, sd_yield)
names(effect) = blocks
data = data.frame(Block = character(), Variety = character(), Yield = numeric())
# no need to seed so that each crop has a different yield
for (b in blocks) {
for (v in varieties) {
avg = default_yield[[v]] + effect[[b]]
acc_yld = rnorm(1, avg, 5)
data <- rbind(data, data.frame(Block = b, Variety = v, Yield = acc_yld))
}
}
data
data_long =tidyr::pivot_wider( data = data,
names_from = Block,
values_from = Yield
)
data_long
library(tidyverse)
wrk_data = data %>% mutate(
Variety = as.factor(Variety),
Block = as.factor(Block)
)
wrk_data
anv = aov(Yield~Variety+Block, data = wrk_data)
summary(anv)
check_p_val = function(pval, sig_level, element){
cat("for the element", element, "\n\n")
if(pval < sig_level){
cat("At a significance level of:\n", sig_level,"\nwe reject H_0.\n\tConclude:\n\t\tthere atleast one mean yield of the maize varieties that is statistically and significantly different from the other yields")   }else{
cat("At a significance level of:\n", sig_level,"\nwe fail to reject H_0.\n\tConclude:\n\t\tno statistically significant mean yield of the maize varieties")
}
}
pvals = summary(anv)[[1]][,"Pr(>F)"]
pvals
variety_pval = pvals[1]
block_pval = pvals[2]
check_p_val(variety_pval, 0.05, "variety")
check_p_val(block_pval, 0.05, "block")
library(ggplot2)
ggplot(wrk_data, aes(x = Variety, y = Yield, fill = Variety))+
geom_boxplot()+
labs(
title = "Box-plots of the yield for each variety",
x = "varieties",
y = "spread"
)+
theme_minimal()+
scale_fill_brewer(palette = "Set4")
library(agricolae)
lsd_res = LSD.test(aov(Yield~Variety, data = wrk_data), "Variety", p.adj = "none")
lsd_res$groups
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/mathematical finance/task and assignements/task 1")
